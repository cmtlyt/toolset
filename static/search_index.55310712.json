[{"id":0,"title":"介绍","content":"#\n\n这是个开发基础库文档, 包含了很多的开发工具包, 会长久缓慢更新\n\n大家先上车后补票哈, 文档我会慢慢更新上来的","routePath":"/toolset/guides/","lang":"","toc":[],"domain":"","frontmatter":{"sidebar":false},"version":""},{"id":3,"title":"介绍","content":"#\n\n@cmtlyt/base 只是一个我的第一个工程, 之后还会有更多的工程被创建, 并且所有有价值的工具方法都会被放到这个包里, 大家可以多关注喔~\n\n大家先上车后补票哈, 文档我会慢慢更新上来的","routePath":"/toolset/packages/base/guide","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":4,"title":"更新日志记录","content":"#\n\n\n日志标识总览#\n\n * (O) 对象\n * (D) 目录\n * (F) 函数\n * (I) 接口\n * (CV) 常量\n * -> 别名\n\n\nv0.6.4#\n\n新增\n\n * (D) utils\n   * (F) reverseArgs\n   * (F) asyncFilter\n\n\nv0.6.1#\n\n函数所属目录调整\n\n\nv0.6.0#\n\n * 目录分类重构\n * 新增客户端检测\n * 使用 rollup 打包\n\n\nv0.5.17#\n\n优化\n\n * isUrl 支持 https 判断\n\n\nv0.5.16#\n\n优化\n\n * gc 类型优化\n\n\nv0.5.15#\n\n修改\n\n修复 merge 类型提示\n\n\nv0.5.14#\n\n修改\n\n添加友好的 merge 类型提示\n\n\nv0.5.13#\n\n新增\n\n * (D) utils\n   * (F) merge\n   * (F) cloneMerge\n\n\nv0.5.12#\n\n修改\n\ncreatePool 的所有权控制增强, 修改返回值类型\n\n\nv0.5.11#\n\n部分函数添加警告\n\n新增\n\n * createUploader 支持二进制上传,支持配置 headersHandler\n * (D) utils\n   * (F) sleep\n   * (F) asyncReplace\n   * (F) memoize\n   * (F) deepClone\n\n\nv0.5.10#\n\n全局添加可控警告 通过 window.__ClConfig__.disableWarning 控制\n\n\nv0.5.9#\n\n新增\n\n * (D) utils\n   * (F) chunkTask\n   * (F) isAsyncFunc\n\n修复\n\n * 修复 apply 方法传参错误问题\n\n优化\n\n * 优化 cacheByReturn 方法底层调用方式\n\n\nv0.5.8#\n\n新增\n\n * (D) utils\n   * (F) getNow\n\n\nv0.5.7#\n\n新增\n\n * (D) utils\n   * (F) getCallStack\n\n\nv0.5.6#\n\n新增\n\n * (D) utils\n   * (F) isTrue\n   * (F) isFalse\n\n修改\n\n * 所有 function 类改为 class 类\n * 所有私有属性和方法, 使用 ES6 的私有句法定义\n\n\nv0.5.5#\n\n新增\n\n * (D) utils\n   * (F) apply\n   * (F) construct\n   * (F) defineProperty\n   * (F) deleteProperty\n   * (F) get\n   * (F) getOwnPropertyDescriptor\n   * (F) getPrototypeOf\n   * (F) has\n   * (F) isExtensible\n   * (F) ownKeys\n   * (F) preventExtensions\n   * (F) set\n   * (F) setPrototypeOf\n * createUploader 支持用户自定义 fetch 参数\n\n\nv0.5.4#\n\n新增\n\n * createUploader 新增 concurrentNode 配置, 用于配制并发上传的节点\n\n\nv0.5.3#\n\n新增\n\n * Logger 新增 getInstance 静态方法\n\n修改\n\n * 部分类型修订\n * 移除多余类型\n * 移除 createStorePool 中的 DefaultStoreController 导出\n\n\nv0.5.2#\n\n新增\n\n * (F) createPool\n * (F) getPool\n\n修复\n\n * 部分类型修复\n\n优化\n\n * createUploader 使用 createPool 管理上传任务，并增加可配置参数\n\n\nv0.5.1#\n\n修复\n\n * 修复 isHttpUrlString 无法识别 // 开头链接的问题\n\n\nv0.5.0#\n\n新增\n\n * (F) createUploader\n * (D) utils\n   * (F) isFile\n   * (F) isBlob\n   * (F) isHttpUrlString\n   * (F) isBlobUrlString\n   * (F) isDataUrlString\n   * (F) isUrl\n   * (F) getArraySlice\n\n修复\n\n * logger 类型错误，及内部参数赋值错误\n * string 模块类型修复\n * 移除多余类型声明\n * createWorkerFunc 类型完善\n\n新增\n\n * createWorkerFunc 监听用户自己发送的事件\n\n备注\n\n * 如果 createWorkerFunc 第三个参数的 needPost 配置项被设置为 true 后，会改变 func 的第一个参数为\n   postMessage 函数，如果需要使用，请注意！！！\n\n\nv0.4.2#\n\n新增\n\n * (D) utils\n   * (F) isEmpty\n\n修复\n\n * 大范围类型修复\n * 修复 pipe 和 compose 写反了的问题\n * 修复 isEmpty 部分类型判断错误问题\n\n修改\n\n * generateCookieInfo 增加可配置参数\n\n\nv0.4.1#\n\n新增\n\n * (D) utils\n   * (F) getType\n\n修改\n\n * Calculator 的 valueOf 方法改为计算器的等于运算符，并新增 getCurrValue 来获取当前值，但不计算最终结果\n\n\n\n修复\n\n * 大范围类型修复\n\n\nv0.4.0#\n\n新增\n\n * (F) curry\n * (F) compose\n * (F) pipe\n\n警告\n\ncompose 和 pipe 类型存在缺陷，只能判断最后输入的函数是否满足条件，不能判断中间的函数\n也就是说从前往后传入函数可以正确判断类型，但是如果是在中间插入函数就不行，而且对于柯理化后的函数，只能判断第一个参数的类型\n\n\nv0.3.3#\n\n修复\n\n * 修复 clipboard.paste 返回类型不统一问题\n\n\nv0.3.2#\n\n修复\n\n * 修复 getArray 类型提示中返回类型错误问题\n\n\nv0.3.1#\n\n修复\n\n * 修复调用 getArray 出现找不到 isNull 的问题\n\n\nv0.3.0#\n\n新增\n\n * (O) cookie\n   * (F) get\n   * (F) set\n   * (F) remove\n * (D) utils\n   * (F) generateCookieInfo\n   * (F) generateClassName -> gc\n\n\nv0.2.0#\n\n新增\n\n * (F) createStorePool\n * (C) DefaultStoreController\n * (I) IStoreController\n * (C) EventEmitter\n * (C) CustomEvent\n * (O) clipboard\n   * (F) copy\n   * (F) paste\n   * (F) clear\n * (C) Calculator\n * (D) utils\n   * (F) debounce\n   * (F) throttle\n   * (F) isNumber\n   * (F) isNaN\n   * (F) isPromise\n\n\nv0.1.0#\n\n新增\n\n * (F) createWorkerFunc\n * (C) Logger\n * (D) utils\n   * (F) getArray\n   * (F) cacheByReturn\n   * (F) formatDate\n   * (F) getRandomString\n   * (F) createLinkByString\n   * (F) isNull\n * (CV) EMPTY","routePath":"/toolset/packages/base/history","lang":"","toc":[{"text":"日志标识总览","id":"日志标识总览","depth":3,"charIndex":3},{"text":"v0.6.4","id":"v064","depth":3,"charIndex":74},{"text":"v0.6.1","id":"v061","depth":3,"charIndex":144},{"text":"v0.6.0","id":"v060","depth":3,"charIndex":164},{"text":"v0.5.17","id":"v0517","depth":3,"charIndex":212},{"text":"v0.5.16","id":"v0516","depth":3,"charIndex":249},{"text":"v0.5.15","id":"v0515","depth":3,"charIndex":276},{"text":"v0.5.14","id":"v0514","depth":3,"charIndex":306},{"text":"v0.5.13","id":"v0513","depth":3,"charIndex":339},{"text":"v0.5.12","id":"v0512","depth":3,"charIndex":403},{"text":"v0.5.11","id":"v0511","depth":3,"charIndex":448},{"text":"v0.5.10","id":"v0510","depth":3,"charIndex":606},{"text":"v0.5.9","id":"v059","depth":3,"charIndex":668},{"text":"v0.5.8","id":"v058","depth":3,"charIndex":796},{"text":"v0.5.7","id":"v057","depth":3,"charIndex":840},{"text":"v0.5.6","id":"v056","depth":3,"charIndex":890},{"text":"v0.5.5","id":"v055","depth":3,"charIndex":1012},{"text":"v0.5.4","id":"v054","depth":3,"charIndex":1344},{"text":"v0.5.3","id":"v053","depth":3,"charIndex":1411},{"text":"v0.5.2","id":"v052","depth":3,"charIndex":1532},{"text":"v0.5.1","id":"v051","depth":3,"charIndex":1648},{"text":"v0.5.0","id":"v050","depth":3,"charIndex":1701},{"text":"v0.4.2","id":"v042","depth":3,"charIndex":2125},{"text":"v0.4.1","id":"v041","depth":3,"charIndex":2274},{"text":"v0.4.0","id":"v040","depth":3,"charIndex":2413},{"text":"v0.3.3","id":"v033","depth":3,"charIndex":2585},{"text":"v0.3.2","id":"v032","depth":3,"charIndex":2632},{"text":"v0.3.1","id":"v031","depth":3,"charIndex":2676},{"text":"v0.3.0","id":"v030","depth":3,"charIndex":2725},{"text":"v0.2.0","id":"v020","depth":3,"charIndex":2870},{"text":"v0.1.0","id":"v010","depth":3,"charIndex":3181}],"domain":"","frontmatter":{},"version":""},{"id":5,"title":"计算器","content":"#\n\n\nCalculator - (class)#\n\n计算器, 支持加减乘除和括号, 支持链式调用\n\n\n静态方法#\n\n\n\n\n参数#\n\n必填   参数名         说明     类型       默认值\n     initValue   初始化值   number   0\n\n\n返回值#\n\nCalculator 实例\n\n\n实例方法#\n\n","routePath":"/toolset/packages/base/tools/calculator","lang":"","toc":[{"text":"Calculator - (class)","id":"calculator---class","depth":2,"charIndex":3},{"text":"静态方法","id":"静态方法","depth":3,"charIndex":51},{"text":"参数","id":"参数","depth":3,"charIndex":61},{"text":"返回值","id":"返回值","depth":3,"charIndex":140},{"text":"实例方法","id":"实例方法","depth":3,"charIndex":162}],"domain":"","frontmatter":{},"version":""},{"id":6,"title":"剪切板","content":"#\n\n\nclipboard - (object)#\n\n剪切板对象, 可以通过该对象的方法操作剪切板\n\n\nclipboard.copy - (function)#\n\n复制文本\n\n参数\n\n必填   参数名    说明        类型       默认值\n是    text   需要复制的文本   string   \n\n返回值: void\n\n\nclipboard.paste - (function)#\n\n读取剪切板中的文本\n\n参数\n\n无\n\n返回值: Promise\n\n\nclipboard.clear - (function)#\n\n清空剪切板\n\n返回值: void\n\n\nclipboard.isCopyable - (attribute)#\n\n是否可复制\n\n返回值: boolean\n\n\nclipboard.isPasteable - (attribute)#\n\n是否可粘贴\n\n返回值: boolean\n\n\nclipboard.isClearable - (attribute)#\n\n是否可清空\n\n返回值: boolean","routePath":"/toolset/packages/base/tools/clipboard","lang":"","toc":[{"text":"clipboard - (object)","id":"clipboard---object","depth":2,"charIndex":3},{"text":"clipboard.copy - (function)","id":"clipboardcopy---function","depth":3,"charIndex":51},{"text":"clipboard.paste - (function)","id":"clipboardpaste---function","depth":3,"charIndex":171},{"text":"clipboard.clear - (function)","id":"clipboardclear---function","depth":3,"charIndex":235},{"text":"clipboard.isCopyable - (attribute)","id":"clipboardiscopyable---attribute","depth":3,"charIndex":285},{"text":"clipboard.isPasteable - (attribute)","id":"clipboardispasteable---attribute","depth":3,"charIndex":344},{"text":"clipboard.isClearable - (attribute)","id":"clipboardisclearable---attribute","depth":3,"charIndex":404}],"domain":"","frontmatter":{},"version":""},{"id":7,"title":"cookie","content":"#\n\n\ncookie - (object)#\n\nCookie 管理器, 可以通过该对象的方法操作 Cookie\n\n\ncookie.get - (function)#\n\n获取 cookie\n\n参数\n\n必填   参数    说明           类型       默认值\n*    key   cookie key   string   \n\n返回值: string | null\n\n\ncookie.set - (function)#\n\n设置 cookie\n\n参数\n\n必填   参数        说明             类型               默认值\n*    key       cookie key     string           \n*    value     cookie value   string           \n     options   cookie 配置      ICookieOptions   {}\n\n类型补充\n\nICookieOptions\n\n\n\n返回值: void\n\n\ncookie.remove - (function)#\n\n移除 cookie\n\n参数\n\n必填   参数    说明           类型       默认值\n是    key   cookie key   string   \n\n返回值: void","routePath":"/toolset/packages/base/tools/cookie","lang":"","toc":[{"text":"cookie - (object)","id":"cookie---object","depth":2,"charIndex":3},{"text":"cookie.get - (function)","id":"cookieget---function","depth":3,"charIndex":57},{"text":"cookie.set - (function)","id":"cookieset---function","depth":3,"charIndex":191},{"text":"cookie.remove - (function)","id":"cookieremove---function","depth":3,"charIndex":466}],"domain":"","frontmatter":{},"version":""},{"id":8,"title":"池","content":"#\n\n\ncreatePool - (function)#\n\n创建池, 他是一个工厂函数, 返回一个 Pool 实例, 用于管理存储的对象, 池的大小可配置, 默认 5, 并且在按规定使用的情况下每个对象都具有所有权\n\n\n参数#\n\n必填   参数             说明                 类型                默认值\n     initFunction   初始化函数              () => T           ()=>EMPTY\n     size           初始大小               number            5\n     poolId         唯一标识, 不传则直接创建新实例   string | symbol   ‘’\n\n\n返回值#\n\nPool 实例\n\n\n实例类型声明#\n\n\n\n警告\n\nget 返回的 IPoolItem 对象不建议和赋值，可能会影响管理\n\n示例\n\n\n\n\ngetPool - (function)#\n\n\n参数#\n\n必填   参数       说明     类型                默认值\n     poolId   唯一标识   string | symbol   ''\n\n\n返回值#\n\nPool 实例\n\n实例类型声明","routePath":"/toolset/packages/base/tools/createPool","lang":"","toc":[{"text":"createPool - (function)","id":"createpool---function","depth":2,"charIndex":3},{"text":"参数","id":"参数","depth":3,"charIndex":109},{"text":"返回值","id":"返回值","depth":3,"charIndex":363},{"text":"实例类型声明","id":"实例类型声明","depth":3,"charIndex":379},{"text":"getPool - (function)","id":"getpool---function","depth":2,"charIndex":437},{"text":"参数","id":"参数-1","depth":3,"charIndex":461},{"text":"返回值","id":"返回值-1","depth":3,"charIndex":553}],"domain":"","frontmatter":{},"version":""},{"id":9,"title":"存储池","content":"#\n\n\ncreateStorePool - (function)#\n\n创建存储池, 返回存储池操作方法, 用于存储数据, 内部通过索引管理, 存储数据时会返回 id, 会自动维护索引, 自动扩容\n\n\n参数#\n\n必填   参数           说明      类型                 默认值\n     controller   存储控制器   IStoreController   DefaultStoreController\n\n类型补充\n\nIStoreController\n\n\n\n\n返回值#\n\nIStorePoolHandle 对象\n\n类型补充\n\nIStorePoolHandle\n\n","routePath":"/toolset/packages/base/tools/createStorePool","lang":"","toc":[{"text":"createStorePool - (function)","id":"createstorepool---function","depth":2,"charIndex":3},{"text":"参数","id":"参数","depth":3,"charIndex":99},{"text":"返回值","id":"返回值","depth":3,"charIndex":249}],"domain":"","frontmatter":{},"version":""},{"id":10,"title":"上传管理器","content":"#\n\n\ncreateUploader - (function)#\n\n创建一个上传管理器, 支持并发上传, 可以调整并发的类型, 例如按分片并发, 或者按文件并发, 自动管理上传状态, 并且返回上传进度信息, 内部使用 fetch\n实现文件上传, 可自行传递 headers 和 fetch 的配置, 并且支持通过函数自定义请求体\n\n\n参数#\n\n必填   参数名                      说明            类型                    默认值\n*    options                  uploader 配置   string                \n*    options.url              上传地址          string                \n     options.maxConcurrent    最大并发数         number                3\n     options.concurrentNode   并发节点类型        'file'|'chunk'        'chunk'\n     options.chunkSize        分片大小          number                1024 * 1024\n     options.dataType         数据类型          'FormData'|'binary'   'FormData'\n     options.dataKey          数据 key        string                'file'\n     options.responseType     响应类型          'json'                'json'\n     options.retryCount       重试次数          number                3\n     options.requestMethod    请求方法          'POST'                'POST'\n     options.headers          请求头           Record                {}\n     options.bodyHandler      自定义请求体        TBodyHanderFunc       -\n     options.headersHandler   自定义请求体        THeadersHandler       -\n     options.bodyHandler      自定义请求体        TBodyHanderFunc       -\n     forceCreate              强制创建实例        boolean               false\n\n类型补充\n\n\n\n警告\n\nTBodyHanderFunc 禁止使用闭包 THeadersHanderFunc 禁止使用闭包\n\n\n返回值#\n\nUploadController 实例\n\n实例类型声明#\n\n","routePath":"/toolset/packages/base/tools/createUploader","lang":"","toc":[{"text":"createUploader - (function)","id":"createuploader---function","depth":2,"charIndex":3},{"text":"参数","id":"参数","depth":3,"charIndex":166},{"text":"返回值","id":"返回值","depth":3,"charIndex":1368},{"text":"实例类型声明","id":"实例类型声明","depth":4,"charIndex":1395}],"domain":"","frontmatter":{},"version":""},{"id":11,"title":"创建 Worker 函数","content":"#\n\n\ncreateWorkerFunc - (function)#\n\n创建一个在 Worker 中运行的函数\n\n\n参数#\n\n必填   参数名                说明                  类型                     默认值\n*    func               要在 Worker 中运行的函数    (...args:any[])=>any   -\n     importScripts      Worker 运行时需要加载的脚本   string[]               []\n     options            选项                  object                 {}\n     options.reuse      是否复用 Worker         boolean                true\n     options.needPost   是否需要将所有参数打包为数组      boolean                false\n\n警告\n\nneedPost 为 true 时, func 的第一个参数会被替换为 postMessage, 用户自己的参数从形参列表第二项开始\n\npostMessage\n\n运行中返回中间结果\n\n参数\n\n必填   参数名    说明       类型    默认值\n*    data   要发送的数据   any   -\n\n返回值\n\n无\n\n--------------------------------------------------------------------------------\n\n\n返回值#\n\n类型             说明\nIWorkerFuncs   包含了 run dispose on remove clearOn onOnce 方法的对象\n\nrun#\n\n运行函数\n\n参数\n\n必填   参数名       说明                 类型      默认值\n*    ...args   和传入 func 相同的参数列表   any[]   -\n\n返回值\n\n类型        说明\nPromise   func 的返回结果在 Promise 的 then 中接收\n\ndispose#\n\n销毁 Worker\n\n参数\n\n无\n\n返回值\n\n无\n\n警告\n\n下面的方法只有在 needPost 为 true 时才有效\n\non#\n\n监听 postMessage 发送的消息\n\n参数\n\n必填   参数名        说明     类型                    默认值\n*    callback   回调函数   (data: any) => void   -\n\n返回值\n\n无\n\nremove#\n\n移除监听\n\n参数\n\n必填   参数名        说明     类型         默认值\n*    callback   回调函数   TAnyFunc   -\n\n返回值\n\n无\n\nclearOn#\n\n清除所有监听\n\n参数\n\n无\n\n返回值\n\n无\n\nonOnce#\n\n只监听一次\n\n参数\n\n必填   参数名        说明     类型                    默认值\n*    callback   回调函数   (data: any) => void   -\n\n返回值\n\n无","routePath":"/toolset/packages/base/tools/createWorkerFunc","lang":"","toc":[{"text":"createWorkerFunc - (function)","id":"createworkerfunc---function","depth":2,"charIndex":3},{"text":"参数","id":"参数","depth":3,"charIndex":57},{"text":"返回值","id":"返回值","depth":3,"charIndex":740},{"text":"run","id":"run","depth":4,"charIndex":827},{"text":"dispose","id":"dispose","depth":4,"charIndex":994},{"text":"on","id":"on","depth":4,"charIndex":1065},{"text":"remove","id":"remove","depth":4,"charIndex":1201},{"text":"clearOn","id":"clearon","depth":4,"charIndex":1303},{"text":"onOnce","id":"ononce","depth":4,"charIndex":1336}],"domain":"","frontmatter":{},"version":""},{"id":12,"title":"事件中心","content":"#\n\n\nEventEmitter - (class)#\n\n事件中心\n\n\n静态方法#\n\n\n\n\n参数#\n\n无\n\n\n返回值#\n\nEventEmitter 实例\n\n\n实例方法#\n\n","routePath":"/toolset/packages/base/tools/eventEmitter","lang":"","toc":[{"text":"EventEmitter - (class)","id":"eventemitter---class","depth":2,"charIndex":3},{"text":"静态方法","id":"静态方法","depth":3,"charIndex":35},{"text":"参数","id":"参数","depth":3,"charIndex":45},{"text":"返回值","id":"返回值","depth":3,"charIndex":54},{"text":"实例方法","id":"实例方法","depth":3,"charIndex":78}],"domain":"","frontmatter":{},"version":""},{"id":13,"title":"总览","content":"#\n\n * 计算器\n * 剪贴板\n * Cookie\n * 创建池\n * 创建存储池(推荐使用 创建池 代替)\n * 创建上传器\n * 创建一个在 Worker 中运行的函数\n * 事件管理\n * 日志管理","routePath":"/toolset/packages/base/tools/","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":14,"title":"日志管理","content":"#\n\n\nLogger - (class)#\n\n日志管理器\n\n\n静态方法#\n\n\n\n\n参数#\n\n必填   参数名                       说明        类型                           默认值\n     options                   日志配置      object                       \n     options.showModuleIds     展示模块 id   any[]                        []\n     options.showMethods       展示方法      string[]                     ['log', 'info', 'warn', 'error', 'debug']\n     options.ignoreMessage     忽略的消息     string[]|IgnoreMessageFunc   []\n     options.messageTemplate   消息模板      string|MessageTemplateFunc   #[date] #[moduleId]-#[method]:=>#[message]\n     options.controller        日志控制器     Controller                   console\n\n类型扩展\n\nIgnoreMessageFunc\n\n类型声明\n\n\n\nMessageTemplateFunc\n\n类型声明\n\n\n\nController\n\noptions.controller 必须要实现 Controller 接口\n\n类型声明\n\n\n\n\n返回值#\n\nLogger 实例\n\n\n实例方法#\n\n","routePath":"/toolset/packages/base/tools/logger","lang":"","toc":[{"text":"Logger - (class)","id":"logger---class","depth":2,"charIndex":3},{"text":"静态方法","id":"静态方法","depth":3,"charIndex":30},{"text":"参数","id":"参数","depth":3,"charIndex":40},{"text":"返回值","id":"返回值","depth":3,"charIndex":763},{"text":"实例方法","id":"实例方法","depth":3,"charIndex":781}],"domain":"","frontmatter":{},"version":""},{"id":15,"title":"常量","content":"#\n\n\nEMPTY#\n\n空对象\n\n类型声明\n\n\n\n示例\n\n","routePath":"/toolset/packages/base/utils/constant","lang":"","toc":[{"text":"EMPTY","id":"empty","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"id":16,"title":"数据处理相关方法","content":"#\n\n\ngetArray#\n\n参数归一化为数组\n\n类型声明\n\n\n\n参数\n\n必填   参数      说明   类型    默认值\n     value   数组   any   \n\n返回值: array\n\n示例\n\n\n\n\ngetArraySlice#\n\n获取数组切片\n\n类型声明\n\n\n\n参数\n\n必填   参数      说明     类型       默认值\n*    array   数组     any[]    \n     size    切片大小   number   \n\n返回值: array\n\n示例\n\n\n\n\ndeepClone#\n\n深拷贝\n\n类型声明\n\n\n\n参数\n\n必填   参数    说明    类型   默认值\n     obj   任意值   T    \n\n返回值: T\n\n示例\n\n\n\n\nmerge#\n\n合并对象\n\n类型声明\n\n\n\n参数\n\n必填   参数          说明       类型      默认值\n*    target      合并的目标    T       \n     ...source   合并数据来源   any[]   \n\n返回值: T\n\n示例\n\n\n\n\ncloneMerge#\n\n深拷贝合并对象\n\n类型声明\n\n\n\n参数\n\n必填   参数          说明       类型      默认值\n*    target      合并的目标    T       \n     ...source   合并数据来源   any[]   \n\n返回值: T\n\n示例\n\n\n\n\nasyncReplace#\n\n异步替换\n\n类型声明\n\n\n\n参数\n\n必填   参数         说明     类型                                                    默认值\n*    str        字符串    string                                                -\n*    pattern    正则     string|RegExp                                         -\n*    replacer   替换函数   (match: string, ...args: any[]) => Promise | string   -\n\n返回值: Promise\n\n示例\n\n\n\n\nasyncFilter#\n\n异步过滤\n\n类型声明\n\n\n\n参数\n\n必填   参数          说明     类型                                              默认值\n*    arr         数组     T[]                                             -\n*    predicate   过滤函数   (item: T, index: number) => Promise | boolean   -\n\n返回值: Promise\n\n示例\n\n","routePath":"/toolset/packages/base/utils/dataHandler","lang":"","toc":[{"text":"getArray","id":"getarray","depth":2,"charIndex":3},{"text":"getArraySlice","id":"getarrayslice","depth":2,"charIndex":109},{"text":"deepClone","id":"deepclone","depth":2,"charIndex":258},{"text":"merge","id":"merge","depth":2,"charIndex":352},{"text":"cloneMerge","id":"clonemerge","depth":2,"charIndex":502},{"text":"asyncReplace","id":"asyncreplace","depth":2,"charIndex":660},{"text":"asyncFilter","id":"asyncfilter","depth":2,"charIndex":1033}],"domain":"","frontmatter":{},"version":""},{"id":17,"title":"函数处理相关方法","content":"#\n\n\ncacheByReturn#\n\n缓存函数返回值\n\n类型声明\n\n\n\n参数\n\n必填   参数          说明       类型   默认值\n*    cacheLoad   缓存加载函数   F    -\n\n返回值: TCacheByReturnType\n\n示例\n\n\n\n\nmemoize#\n\n缓存函数\n\n类型声明\n\n\n\n参数\n\n必填   参数         说明       类型   默认值\n*    func       缓存加载函数   F    -\n     resolver   缓存解析函数   F    -\n\n返回值: F\n\n示例\n\n\n\n\ncurry#\n\n将普通函数转换为柯里化函数\n\n> 不放类型声明了，太过复杂\n\n参数\n\n必填   参数名   类型         说明        默认值\n*    fn    TAnyFunc   需要转换的函数   -\n\n返回值: 柯里化后的函数\n\n示例\n\n\n\n\ncompose#\n\n组合函数，从右到左执行\n\n> 不放类型声明了，太过复杂\n\n参数\n\n必填   参数名     类型           说明        默认值\n*    funcs   TAnyFunc[]   需要组合的函数   -\n\n返回值: 组合后的函数\n\n示例\n\n\n\n\npipe#\n\n组合函数，从左到右执行\n\n> 不放类型声明了，太过复杂\n\n参数\n\n必填   参数名     类型           说明        默认值\n*    funcs   TAnyFunc[]   需要组合的函数   -\n\n返回值: 组合后的函数\n\n示例\n\n\n\n\ndebounce#\n\n函数防抖\n\n类型声明\n\n\n\n参数\n\n必填   参数名           说明                 类型        默认值\n*    func          要防抖的函数             F         -\n     time          防抖时间，默认为 100ms     number    100\n     immediately   是否立即执行，默认为 false   boolean   false\n\n返回值: (...args: TArgsType) => void\n\n示例\n\n\n\n\nthrottle#\n\n函数节流\n\n类型声明\n\n\n\n参数\n\n必填   参数名           说明                类型        默认值\n*    func          要节流的函数            F         -\n     time          节流时间，默认为 100ms    number    100\n     immediately   是否立即执行，默认为 true   boolean   true\n\n返回值: (...args: TArgsType) => void\n\n示例\n\n\n\n\nchunkTask#\n\n大任务分块执行\n\n类型声明\n\n\n\n参数\n\n必填   参数名    说明   类型   默认值\n*    task   任务   F    -\n\n返回值: (args: T[] | number) => Promise, Promise>>\n\n示例\n\n\n\n\nsleep#\n\n等待指定时间\n\n类型声明\n\n\n\n参数\n\n必填   参数名    说明   类型       默认值\n*    time   时间   number   -\n\n返回值: Promise\n\n示例\n\n\n\n\n\n\nreverseArgs#\n\n反转函数参数\n\n参数\n\n必填   参数名        说明   类型   默认值\n*    callback   回调   F    -\n\n返回值: (...args: ReverseArray>) => ReturnType\n\n示例\n\n","routePath":"/toolset/packages/base/utils/funcHandler","lang":"","toc":[{"text":"cacheByReturn","id":"cachebyreturn","depth":2,"charIndex":3},{"text":"memoize","id":"memoize","depth":2,"charIndex":141},{"text":"curry","id":"curry","depth":2,"charIndex":283},{"text":"compose","id":"compose","depth":2,"charIndex":418},{"text":"pipe","id":"pipe","depth":2,"charIndex":560},{"text":"debounce","id":"debounce","depth":2,"charIndex":699},{"text":"throttle","id":"throttle","depth":2,"charIndex":979},{"text":"chunkTask","id":"chunktask","depth":2,"charIndex":1254},{"text":"sleep","id":"sleep","depth":2,"charIndex":1394},{"text":"reverseArgs","id":"reverseargs","depth":2,"charIndex":1504}],"domain":"","frontmatter":{},"version":""},{"id":18,"title":"数据获取相关方法","content":"#\n\n\ngetRandomString#\n\n获取指定长度的随机字符串\n\n类型声明\n\n\n\n参数\n\n必填   参数    说明      类型       默认值\n     len   字符串长度   number   8\n\n返回值: string\n\n示例\n\n\n\n\ncreateLinkByString#\n\n将传入的字符串转化为 blob 地址\n\n类型声明\n\n\n\n参数\n\n必填   参数         说明     类型       默认值\n*    resource   资源内容   string   -\n\n返回值: string\n\n示例\n\n\n\n\ngenerateCookieInfo#\n\n生成 cookie 信息\n\n类型声明\n\n\n\n参数\n\n必填   参数        说明          类型               默认值\n     options   cookie 配置   ICookieOptions   {}\n\n返回值: string\n\n示例\n\n\n\n\ngenerateClassName#\n\n生成 className\n\n类型声明\n\n\n\n参数\n\n必填   参数     说明   类型                                                      默认值\n*    args   类名   (string|string[]|Record|Record[]|(string|Record)[])[]   -\n\n返回值: string\n\n示例\n\n\n\n\ngetNow#\n\n获取当前时间, 支持 performance API 的浏览器会返回 performance.now, 不支持的浏览器会返回 Date.now\n\n类型声明\n\n\n\n返回值: number\n\n示例\n\n\n\n\ngetOsType#\n\n获取操作系统类型\n\n类型声明\n\n\n\n返回值: \"ios\" | \"android\" | \"openHarmony\" | \"mac\" | \"windows\" | \"linux\" | \"aix\" |\n\"freebsd\" | \"haiku\" | \"openbsd\" | \"sunos\" | \"cygwin\" | \"netbsd\" | \"other\"\n\n示例\n\n\n\n\ngetUserAgent#\n\n获取用户代理\n\n类型声明\n\n\n\n返回值: string\n\n示例\n\n\n\n\ngetDeviceInfo#\n\n获取设备信息\n\n类型声明\n\n\n\n返回值: { appName: string; appVersion: string; screenWidth: number; screenHeight:\nnumber; devicePixelRatio: number; platform: string; userAgent: string; }\n\n示例\n\n\n\n\nsafeGetGlobal#\n\n安全获取全局变量\n\n类型声明\n\n\n\n返回值: any\n\n示例\n\n\n\n\ngetType#\n\n获取值类型\n\n类型声明\n\n\n\n参数\n\n必填   参数名     类型    描述      默认值\n*    value   any   待判断的值   -\n\n返回值: string\n\n示例\n\n","routePath":"/toolset/packages/base/utils/getData","lang":"","toc":[{"text":"getRandomString","id":"getrandomstring","depth":2,"charIndex":3},{"text":"createLinkByString","id":"createlinkbystring","depth":2,"charIndex":130},{"text":"generateCookieInfo","id":"generatecookieinfo","depth":2,"charIndex":274},{"text":"generateClassName","id":"generateclassname","depth":2,"charIndex":437},{"text":"getNow","id":"getnow","depth":2,"charIndex":656},{"text":"getOsType","id":"getostype","depth":2,"charIndex":766},{"text":"getUserAgent","id":"getuseragent","depth":2,"charIndex":957},{"text":"getDeviceInfo","id":"getdeviceinfo","depth":2,"charIndex":1008},{"text":"safeGetGlobal","id":"safegetglobal","depth":2,"charIndex":1200},{"text":"getType","id":"gettype","depth":2,"charIndex":1251}],"domain":"","frontmatter":{},"version":""},{"id":19,"title":"总览","content":"#\n\n * 常量\n * 函数处理相关方法\n * 数据处理相关方法\n * 数据获取相关方法\n * 校验相关方法\n * 客户端判断相关方法","routePath":"/toolset/packages/base/utils/","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":20,"title":"客户端判断相关方法","content":"#\n\n * isNode (判断是否为 node 环境)\n * isWeb (判断是否为 web 环境)\n * isIOS (判断是否为 iOS 环境)\n * isAndroid (判断是否为 Android 环境)\n * isChrome (判断是否为 Chrome 环境)\n * isFirefox (判断是否为 Firefox 环境)\n * isSafari (判断是否为 Safari 环境)\n * isNewEdge (判断是否 新版 Edge 环境)\n * isOldEdge (判断是否 旧版 Edge 环境)\n * isEdge (判断是否为 Edge 环境)\n * isWeex (判断是否为 Weex 环境)\n * isKraken (判断是否为 Kraken 环境)\n * isQuickApp (判断是否为 QuickApp 环境)\n * isTBWeb (判断是否为 淘宝 web 环境)\n * isLTWeb (判断是否为 淘特 web 环境)\n * isTbLive (判断是否为 淘宝直播环境)\n * isTbWebEnv (判断是否为 淘宝 web 环境)\n * isWechatWeb (判断是否为 微信 web 环境)\n * isAliPayWeb (判断是否为 支付宝 web 环境)\n * isWebInDingding (判断是否为 钉钉 web 环境)\n * isTuan (判断是否为 淘宝环境)\n * isLST (判断是否为 零售通环境)\n * isLXB (判断是否为 零销宝环境)\n * isAliAppWeb (判断是否为 阿里应用 web 环境)\n * isMiniApp (判断是否为 小程序环境)\n * isAliMiniApp (判断是否为 阿里小程序环境)\n * isDingdingMiniapp (判断是否为 钉钉小程序环境)\n * isTaobaoMiniapp (判断是否为 淘宝小程序环境)\n * isAlipayMiniapp (判断是否为 支付宝小程序环境)\n * isTBMiniapp (判断是否为 淘宝小程序环境)\n * isLTMiniapp (判断是否为 淘特小程序环境)\n * isMMCMiniapp (判断是否为 猫超小程序环境)\n * isXiNiaoapp (判断是否为 西南小程序环境)\n * isCaiNiaoApp (判断是否为 菜鸟小程序环境)\n * isAlipayApp (判断是否为 支付宝小程序环境)\n * isByteDanceMicroApp (判断是否为 字节小程序环境)\n * isBaiduSmartProgram (判断是否为 百度小程序环境)\n * isKuaiShouMiniProgram (判断是否为 快手小程序环境)\n * isWeChatMiniProgram (判断是否为 微信小程序环境)\n * isAliMiniappPlatform (判断是否为 支付宝小程序平台环境)\n * isTBNode (判断是否为 淘宝 node 环境)\n * isLTNode (判断是否为 淘特 node 环境)\n * isWechatNode (判断是否为 微信 node 环境)\n * isTB (判断是否为 淘宝环境)\n * isLT (判断是否为 淘特环境)\n * isAliPay (判断是否为 支付宝环境)\n * isTmall (判断是否为 天猫环境)\n * isAliApp (判断是否为 阿里应用环境)\n * isWechat (判断是否为 微信环境)\n * isCaiNiaoBusiness (判断是否为 菜鸟商家环境)\n * isCaiNiao (判断是否为 菜鸟环境)\n * isAliUa (判断是否为 阿里环境)\n * isHmApp (判断是否为 盒马环境)\n * isYouKu (判断是否为 优酷环境)\n * isAlipayMiniWeb (判断是否为 支付宝小程序 web 环境)\n * isLTMiniWeb (判断是否为 淘特小程序 web 环境)\n * isLBMiniWeb (判断是否为 零销宝小程序 web 环境)\n * isTBMiniWeb (判断是否为 淘宝小程序 web 环境)\n * isDingTalk (判断是否为 钉钉环境)\n * isTuanWebview (判断是否为 团长小程序 webview 嵌套的h5)\n * isWechatMiniWeb (判断是否为 微信小程序 web 环境)\n * isWechatH5 (判断是否为 微信 h5 环境)\n * isWebInMiniApp (判断是否为 小程序 web 环境)\n * isAliWebInMiniApp (判断是否为 阿里小程序 web 环境)\n * isAliAppMiniApp (判断是否为 阿里小程序环境)\n * isOpenHarmony (判断是否为 鸿蒙操作系统)\n * isIPhoneX (判断是否为 iPhoneX 操作系统)\n * isIPhoneXSMax (判断是否为 iPhoneXSMax 操作系统)\n * isIPhoneXR (判断是否为 iPhoneXR 操作系统)\n * isIPhone14PM (判断是否为 iPhone14PM 操作系统)\n * isIOSNotchScreen (判断是否为 有刘海屏)","routePath":"/toolset/packages/base/utils/ua","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":21,"title":"校验相关方法","content":"#\n\n\nisNull#\n\n判断是否为 null\n\n类型声明\n\n\n\n参数\n\n必填   参数名     类型    描述      默认值\n*    value   any   待判断的值   -\n\n返回值: boolean\n\n示例\n\n\n\n\nisNaN#\n\n判断是否为 NaN\n\n类型声明\n\n\n\n参数\n\n必填   参数名     类型    描述      默认值\n*    value   any   待判断的值   -\n\n返回值: boolean\n\n示例\n\n\n\n\nisNumber#\n\n判断是否为数字\n\n类型声明\n\n\n\n参数\n\n必填   参数名     类型    描述      默认值\n*    value   any   待判断的值   -\n\n返回值: boolean\n\n示例\n\n\n\n\nisPromise#\n\n判断是否为 Promise\n\n类型声明\n\n\n\n参数\n\n必填   参数名     类型    描述      默认值\n*    value   any   待判断的值   -\n\n返回值: boolean\n\n示例\n\n\n\n\nisEmpty#\n\n判断是否为空\n\n类型声明\n\n\n\n参数\n\n必填   参数名     类型    描述      默认值\n*    value   any   待判断的值   -\n\n返回值: boolean\n\n示例\n\n\n\n\nisFile#\n\n判断是否为文件\n\n类型声明\n\n\n\n参数\n\n必填   参数名     类型    描述      默认值\n*    value   any   待判断的值   -\n\n返回值: boolean\n\n示例\n\n\n\n\nisBlob#\n\n判断是否为 Blob\n\n类型声明\n\n\n\n参数\n\n必填   参数名     类型    描述      默认值\n*    value   any   待判断的值   -\n\n返回值: boolean\n\n示例\n\n\n\n\nisHttpUrlString#\n\n判断是否为 http 链接字符串\n\n类型声明\n\n\n\n参数\n\n必填   参数名     类型    描述      默认值\n*    value   any   待判断的值   -\n\n返回值: boolean\n\n示例\n\n\n\n\nisBlobUrlString#\n\n判断是否为 blob 链接字符串\n\n类型声明\n\n\n\n参数\n\n必填   参数名     类型    描述      默认值\n*    value   any   待判断的值   -\n\n返回值: boolean\n\n示例\n\n\n\n\nisDataUrlString#\n\n判断是否为 data 链接字符串\n\n类型声明\n\n\n\n参数\n\n必填   参数名     类型    描述      默认值\n*    value   any   待判断的值   -\n\n返回值: boolean\n\n示例\n\n\n\n\nisUrl#\n\n判断是否为 url\n\n类型声明\n\n\n\n参数\n\n必填   参数名     类型    描述      默认值\n*    value   any   待判断的值   -\n\n返回值: boolean\n\n示例\n\n\n\n\nisAsyncFunc#\n\n判断是否为异步函数\n\n类型声明\n\n\n\n参数\n\n必填   参数名     类型    描述      默认值\n*    value   any   待判断的值   -\n\n返回值: boolean\n\n示例\n\n\n\n\nisUndef#\n\n判断是否为 undefined\n\n类型声明\n\n\n\n参数\n\n必填   参数名     类型    描述      默认值\n*    value   any   待判断的值   -\n\n返回值: boolean\n\n示例\n\n\n\n\nisString#\n\n判断是否为字符串\n\n类型声明\n\n\n\n参数\n\n必填   参数名     类型    描述      默认值\n*    value   any   待判断的值   -\n\n返回值: boolean\n\n示例\n\n\n\n\nisHttpsUrlString#\n\n判断是否为 https 链接字符串\n\n类型声明\n\n\n\n参数\n\n必填   参数名     类型    描述      默认值\n*    value   any   待判断的值   -\n\n返回值: boolean\n\n示例\n\n\n\n\nisTrue#\n\n判断是否为 true\n\n类型声明\n\n\n\n参数\n\n必填   参数名     类型    描述      默认值\n*    value   any   待判断的值   -\n\n返回值: boolean 示例\n\n\n\n\nisFalse#\n\n判断是否为 false\n\n类型声明\n\n\n\n参数\n\n必填   参数名     类型    描述      默认值\n*    value   any   待判断的值   -\n\n返回值: boolean 示例\n\n\n\n\nisInIframe#\n\n判断是否在 iframe 中\n\n类型声明\n\n\n\n返回值: boolean\n\n示例\n\n","routePath":"/toolset/packages/base/utils/verify","lang":"","toc":[{"text":"isNull","id":"isnull","depth":2,"charIndex":3},{"text":"isNaN","id":"isnan","depth":2,"charIndex":118},{"text":"isNumber","id":"isnumber","depth":2,"charIndex":231},{"text":"isPromise","id":"ispromise","depth":2,"charIndex":345},{"text":"isEmpty","id":"isempty","depth":2,"charIndex":466},{"text":"isFile","id":"isfile","depth":2,"charIndex":578},{"text":"isBlob","id":"isblob","depth":2,"charIndex":690},{"text":"isHttpUrlString","id":"ishttpurlstring","depth":2,"charIndex":805},{"text":"isBlobUrlString","id":"isbloburlstring","depth":2,"charIndex":935},{"text":"isDataUrlString","id":"isdataurlstring","depth":2,"charIndex":1065},{"text":"isUrl","id":"isurl","depth":2,"charIndex":1195},{"text":"isAsyncFunc","id":"isasyncfunc","depth":2,"charIndex":1308},{"text":"isUndef","id":"isundef","depth":2,"charIndex":1427},{"text":"isString","id":"isstring","depth":2,"charIndex":1548},{"text":"isHttpsUrlString","id":"ishttpsurlstring","depth":2,"charIndex":1663},{"text":"isTrue","id":"istrue","depth":2,"charIndex":1795},{"text":"isFalse","id":"isfalse","depth":2,"charIndex":1909},{"text":"isInIframe","id":"isiniframe","depth":2,"charIndex":2025}],"domain":"","frontmatter":{},"version":""},{"id":22,"title":"目录","content":"#","routePath":"/toolset/packages/","lang":"","toc":[],"domain":"","frontmatter":{},"version":""}]
"use strict";(self.webpackChunk_cmtlyt_toolset=self.webpackChunk_cmtlyt_toolset||[]).push([["827"],{3849:function(e,n,r){r.r(n),r.d(n,{default:function(){return i}});var s=r(2676),d=r(453),c=r(2287);function t(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",strong:"strong",pre:"pre",code:"code",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",blockquote:"blockquote"},(0,d.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"函数处理相关方法",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#函数处理相关方法",children:"#"}),"函数处理相关方法"]}),"\n",(0,s.jsx)(c.Z,{defaultLocale:"zh-CN"}),"\n",(0,s.jsxs)(n.h2,{id:"cachebyreturn",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cachebyreturn",children:"#"}),"cacheByReturn"]}),"\n",(0,s.jsx)(n.p,{children:"缓存函数返回值"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"类型声明"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"type TAnyFunc = (...args: any[]) => any;\ntype TCacheByReturnType<F extends () => any, R = ReturnType<F>> = R extends TAnyFunc ? R : () => R;\n\nfunction cacheByReturn<F extends () => any>(cacheLoad: F): TCacheByReturnType<F>;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"参数"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{align:"center",children:"必填"}),(0,s.jsx)(n.th,{children:"参数"}),(0,s.jsx)(n.th,{children:"说明"}),(0,s.jsx)(n.th,{children:"类型"}),(0,s.jsx)(n.th,{children:"默认值"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center",children:"*"}),(0,s.jsx)(n.td,{children:"cacheLoad"}),(0,s.jsx)(n.td,{children:"缓存加载函数"}),(0,s.jsx)(n.td,{children:"F"}),(0,s.jsx)(n.td,{children:"-"})]})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"返回值"}),": ",(0,s.jsx)(n.code,{children:"TCacheByReturnType<F>"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"示例"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"import { cacheByReturn } from '@cmtlyt/base';\n// import { cacheByReturn } from '@cmtlyt/base/utils/funcHandler';\n\nconst cacheLoad = () => {\n  console.log('cacheLoad');\n  return 'hello world';\n};\nconst cachedLoad = cacheByReturn(cacheLoad);\nconsole.log(cachedLoad()); // cacheLoad \\n hello world\nconsole.log(cachedLoad()); // hello world\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"memoize",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#memoize",children:"#"}),"memoize"]}),"\n",(0,s.jsx)(n.p,{children:"缓存函数"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"类型声明"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"function memoize<F extends TAnyFunc>(func: F, resolver?: (...args: TArgsType<F>) => any): F;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"参数"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{align:"center",children:"必填"}),(0,s.jsx)(n.th,{children:"参数"}),(0,s.jsx)(n.th,{children:"说明"}),(0,s.jsx)(n.th,{children:"类型"}),(0,s.jsx)(n.th,{children:"默认值"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center",children:"*"}),(0,s.jsx)(n.td,{children:"func"}),(0,s.jsx)(n.td,{children:"缓存加载函数"}),(0,s.jsx)(n.td,{children:"F"}),(0,s.jsx)(n.td,{children:"-"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center"}),(0,s.jsx)(n.td,{children:"resolver"}),(0,s.jsx)(n.td,{children:"缓存解析函数"}),(0,s.jsx)(n.td,{children:"F"}),(0,s.jsx)(n.td,{children:"-"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"返回值"}),": ",(0,s.jsx)(n.code,{children:"F"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"示例"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"import { memoize } from '@cmtlyt/base';\n// import { memoize } from '@cmtlyt/base/utils/funcHandler';\n\nconst fn = (a: number, b: number) => {\n  console.log('fn');\n  return a + b;\n};\nconst memoizedFn = memoize(fn);\nmemoizedFn(1, 2); // fn \\n 3\nmemoizedFn(1, 2); // 3\nmemoizedFn(1, 2); // 3\nmemoizedFn(2, 2); // fn \\n 4\nmemoizedFn(2, 2); // 4\nmemoizedFn(1, 3); // fn \\n 4\nmemoizedFn(1, 3); // 4\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"curry",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#curry",children:"#"}),"curry"]}),"\n",(0,s.jsx)(n.p,{children:"将普通函数转换为柯里化函数"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"不放类型声明了，太过复杂"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"参数"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{align:"center",children:"必填"}),(0,s.jsx)(n.th,{children:"参数名"}),(0,s.jsx)(n.th,{children:"类型"}),(0,s.jsx)(n.th,{children:"说明"}),(0,s.jsx)(n.th,{children:"默认值"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center",children:"*"}),(0,s.jsx)(n.td,{children:"fn"}),(0,s.jsx)(n.td,{children:"TAnyFunc"}),(0,s.jsx)(n.td,{children:"需要转换的函数"}),(0,s.jsx)(n.td,{children:"-"})]})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"返回值"}),": 柯里化后的函数"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"示例"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"import { curry } from '@cmtlyt/base';\n// import { curry } from '@cmtlyt/base/utils/funcHandler';\n\nconst add = (a: number, b: number) => a + b;\nconst curriedAdd = curry(add);\ncurriedAdd(1)(2); // 3\ncurriedAdd(1, 2); // 3\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"compose",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#compose",children:"#"}),"compose"]}),"\n",(0,s.jsx)(n.p,{children:"组合函数，从右到左执行"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"不放类型声明了，太过复杂"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"参数"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{align:"center",children:"必填"}),(0,s.jsx)(n.th,{children:"参数名"}),(0,s.jsx)(n.th,{children:"类型"}),(0,s.jsx)(n.th,{children:"说明"}),(0,s.jsx)(n.th,{children:"默认值"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center",children:"*"}),(0,s.jsx)(n.td,{children:"funcs"}),(0,s.jsx)(n.td,{children:"TAnyFunc[]"}),(0,s.jsx)(n.td,{children:"需要组合的函数"}),(0,s.jsx)(n.td,{children:"-"})]})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"返回值"}),": 组合后的函数"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"示例"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"import { compose, curry } from '@cmtlyt/base';\n// import { compose, curry } from '@cmtlyt/base/utils/funcHandler';\n\nconst add = curry((a: number, b: number) => a + b);\nconst multiply = curry((a: number, b: number) => a * b);\nconst addAndMultiply = compose(multiply(2), add);\naddAndMultiply(1, 2); // 6\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"pipe",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#pipe",children:"#"}),"pipe"]}),"\n",(0,s.jsx)(n.p,{children:"组合函数，从左到右执行"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"不放类型声明了，太过复杂"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"参数"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{align:"center",children:"必填"}),(0,s.jsx)(n.th,{children:"参数名"}),(0,s.jsx)(n.th,{children:"类型"}),(0,s.jsx)(n.th,{children:"说明"}),(0,s.jsx)(n.th,{children:"默认值"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center",children:"*"}),(0,s.jsx)(n.td,{children:"funcs"}),(0,s.jsx)(n.td,{children:"TAnyFunc[]"}),(0,s.jsx)(n.td,{children:"需要组合的函数"}),(0,s.jsx)(n.td,{children:"-"})]})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"返回值"}),": 组合后的函数"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"示例"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"import { pipe, curry } from '@cmtlyt/base';\n// import { pipe, curry } from '@cmtlyt/base/utils/funcHandler';\n\nconst add = curry((a: number, b: number) => a + b);\nconst multiply = curry((a: number, b: number) => a * b);\nconst addAndMultiply = pipe(add, multiply(2));\naddAndMultiply(1, 2); // 6\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"debounce",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#debounce",children:"#"}),"debounce"]}),"\n",(0,s.jsx)(n.p,{children:"函数防抖"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"类型声明"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"type TArgsType<F> = F extends (...args: infer T) => any ? T : never;\n\nfunction debounce<F extends (...args: any[]) => any>(\n  func: F,\n  time?: number,\n  immediately?: boolean,\n): (...args: TArgsType<F>) => void;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"参数"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{align:"center",children:"必填"}),(0,s.jsx)(n.th,{children:"参数名"}),(0,s.jsx)(n.th,{children:"说明"}),(0,s.jsx)(n.th,{children:"类型"}),(0,s.jsx)(n.th,{children:"默认值"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center",children:"*"}),(0,s.jsx)(n.td,{children:"func"}),(0,s.jsx)(n.td,{children:"要防抖的函数"}),(0,s.jsx)(n.td,{children:"F"}),(0,s.jsx)(n.td,{children:"-"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center"}),(0,s.jsx)(n.td,{children:"time"}),(0,s.jsx)(n.td,{children:"防抖时间，默认为 100ms"}),(0,s.jsx)(n.td,{children:"number"}),(0,s.jsx)(n.td,{children:"100"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center"}),(0,s.jsx)(n.td,{children:"immediately"}),(0,s.jsx)(n.td,{children:"是否立即执行，默认为 false"}),(0,s.jsx)(n.td,{children:"boolean"}),(0,s.jsx)(n.td,{children:"false"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"返回值"}),": ",(0,s.jsx)(n.code,{children:"(...args: TArgsType<F>) => void"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"示例"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"import { debounce } from '@cmtlyt/base';\n// import { debounce } from '@cmtlyt/base/utils/funcHandler'\n\nconst fn = debounce(() => {\n  console.log('hello');\n}, 1000);\n\nfn();\nfn();\nfn();\nfn(); // hello\n\nsetTimeout(() => {\n  fn(); // hello\n}, 1500);\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"throttle",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#throttle",children:"#"}),"throttle"]}),"\n",(0,s.jsx)(n.p,{children:"函数节流"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"类型声明"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"type TArgsType<F> = F extends (...args: infer T) => any ? T : never;\n\nfunction throttle<F extends (...args: any[]) => any>(\n  func: F,\n  time?: number,\n  immediately?: boolean,\n): (...args: TArgsType<F>) => void;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"参数"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{align:"center",children:"必填"}),(0,s.jsx)(n.th,{children:"参数名"}),(0,s.jsx)(n.th,{children:"说明"}),(0,s.jsx)(n.th,{children:"类型"}),(0,s.jsx)(n.th,{children:"默认值"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center",children:"*"}),(0,s.jsx)(n.td,{children:"func"}),(0,s.jsx)(n.td,{children:"要节流的函数"}),(0,s.jsx)(n.td,{children:"F"}),(0,s.jsx)(n.td,{children:"-"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center"}),(0,s.jsx)(n.td,{children:"time"}),(0,s.jsx)(n.td,{children:"节流时间，默认为 100ms"}),(0,s.jsx)(n.td,{children:"number"}),(0,s.jsx)(n.td,{children:"100"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center"}),(0,s.jsx)(n.td,{children:"immediately"}),(0,s.jsx)(n.td,{children:"是否立即执行，默认为 true"}),(0,s.jsx)(n.td,{children:"boolean"}),(0,s.jsx)(n.td,{children:"true"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"返回值"}),": ",(0,s.jsx)(n.code,{children:"(...args: TArgsType<F>) => void"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"示例"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"import { throttle } from '@cmtlyt/base';\n// import { throttle } from '@cmtlyt/base/utils/funcHandler'\n\nconst fn = throttle(() => {\n  console.log('hello');\n}, 1000);\n\nfn(); // hello\nfn();\nfn();\nfn();\n\nsetTimeout(() => {\n  fn(); // hello\n}, 1500);\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"chunktask",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#chunktask",children:"#"}),"chunkTask"]}),"\n",(0,s.jsx)(n.p,{children:"大任务分块执行"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"类型声明"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"export declare function chunkTask<T, F extends (arg: T) => any = (arg: T) => any>(\n  task: F,\n): <R extends TUnwrapPromise<ReturnType<F>>>(args: T[] | number) => Promise<R>;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"参数"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{align:"center",children:"必填"}),(0,s.jsx)(n.th,{children:"参数名"}),(0,s.jsx)(n.th,{children:"说明"}),(0,s.jsx)(n.th,{children:"类型"}),(0,s.jsx)(n.th,{children:"默认值"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center",children:"*"}),(0,s.jsx)(n.td,{children:"task"}),(0,s.jsx)(n.td,{children:"任务"}),(0,s.jsx)(n.td,{children:"F"}),(0,s.jsx)(n.td,{children:"-"})]})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"返回值"}),": ",(0,s.jsx)(n.code,{children:"(args: T[] | number) => Promise<TCast<ReturnType<F>, Promise<any>>>"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"示例"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"import { chunkTask } from '@cmtlyt/base';\n// import { chunkTask } from '@cmtlyt/base/utils/funcHandler';\n\nconst task = async (arg: number) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(arg);\n    }, 1000);\n  });\n};\nconst chunkedTask = chunkTask(task);\nchunkedTask([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"sleep",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sleep",children:"#"}),"sleep"]}),"\n",(0,s.jsx)(n.p,{children:"等待指定时间"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"类型声明"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"function sleep(time: number): Promise<void>;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"参数"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{align:"center",children:"必填"}),(0,s.jsx)(n.th,{children:"参数名"}),(0,s.jsx)(n.th,{children:"说明"}),(0,s.jsx)(n.th,{children:"类型"}),(0,s.jsx)(n.th,{children:"默认值"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center",children:"*"}),(0,s.jsx)(n.td,{children:"time"}),(0,s.jsx)(n.td,{children:"时间"}),(0,s.jsx)(n.td,{children:"number"}),(0,s.jsx)(n.td,{children:"-"})]})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"返回值"}),": ",(0,s.jsx)(n.code,{children:"Promise<void>"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"示例"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"import { sleep } from '@cmtlyt/base';\n// import { sleep } from '@cmtlyt/base/utils/funcHandler';\n\nsleep(1000).then(() => {\n  console.log('hello');\n});\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"export function reverseArgs<F extends TAnyFunc>(callback: F) {\n  return (...args: ReverseArray<Parameters<F>>): ReturnType<F> => callback.apply(null, args.reverse());\n}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"reverseargs",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#reverseargs",children:"#"}),"reverseArgs"]}),"\n",(0,s.jsx)(n.p,{children:"反转函数参数"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"参数"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{align:"center",children:"必填"}),(0,s.jsx)(n.th,{children:"参数名"}),(0,s.jsx)(n.th,{children:"说明"}),(0,s.jsx)(n.th,{children:"类型"}),(0,s.jsx)(n.th,{children:"默认值"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center",children:"*"}),(0,s.jsx)(n.td,{children:"callback"}),(0,s.jsx)(n.td,{children:"回调"}),(0,s.jsx)(n.td,{children:"F"}),(0,s.jsx)(n.td,{children:"-"})]})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"返回值"}),": ",(0,s.jsx)(n.code,{children:"(...args: ReverseArray<TArgsType<F>>) => ReturnType<F>"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"示例"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"import { reverseArgs } from '@cmtlyt/base';\n// import { reverseArgs } from '@cmtlyt/base/utils/funcHandler';\n\nconst fn = (a: number, b: string) => {\n  return `${a} + ${b} = ${a + b}`;\n};\nconst reversedFn = reverseArgs(fn);\nreversedFn('1', 2); // 1 + 2 = 3\n"})})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(t,e)})):t(e)}let i=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["packages%2Fbase%2Futils%2FfuncHandler.md"]={toc:[{id:"cachebyreturn",text:"cacheByReturn",depth:2},{id:"memoize",text:"memoize",depth:2},{id:"curry",text:"curry",depth:2},{id:"compose",text:"compose",depth:2},{id:"pipe",text:"pipe",depth:2},{id:"debounce",text:"debounce",depth:2},{id:"throttle",text:"throttle",depth:2},{id:"chunktask",text:"chunkTask",depth:2},{id:"sleep",text:"sleep",depth:2},{id:"reverseargs",text:"reverseArgs",depth:2}],title:"函数处理相关方法",frontmatter:{}}},2287:function(e,n,r){r.d(n,{Z:function(){return i}});var s=r(2676),d=r(5271),c=r(2117);r(4986);let t={"zh-CN":e=>`预计阅读时间: ${e.minutes>=1?`${Math.ceil(e.minutes)} 分钟`:"小于 1 分钟"}`,"en-US":e=>`Estimated reading time: ${e.minutes>=1?`${Math.ceil(e.minutes)} minutes`:"less than 1 minute"}`};function l(e,n,r){let s=Object.keys(t).includes(n)?n:r;return t[s](e)}let i=e=>{let{defaultLocale:n="en-US"}=e,r=(0,c.Vi)().page.readingTimeData,t=(0,c.Jr)(),i=(0,c.e7)(),[h,a]=(0,d.useState)(l(r,t,n));return(0,d.useEffect)(()=>{a(l(r,t,n))},[t,r]),(0,s.jsx)("span",{"data-dark":String(i),className:"rp-reading-time",children:h})}}}]);
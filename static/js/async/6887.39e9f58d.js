"use strict";(self.webpackChunk_cmtlyt_toolset=self.webpackChunk_cmtlyt_toolset||[]).push([["6887"],{3853:function(n,e,r){r.r(e),r.d(e,{default:function(){return a}});var s=r(2676),i=r(453),t=r(2287);function c(n){let e=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",h2:"h2",pre:"pre",code:"code",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",h4:"h4",ol:"ol",li:"li"},(0,i.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.h1,{id:"斐波那契数列",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#斐波那契数列",children:"#"}),"斐波那契数列"]}),"\n",(0,s.jsx)(t.Z,{defaultLocale:"zh-CN"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"斐波那契数列：F(0) = 0, F(1) = 1, F(n) = F(n - 1) + F(n - 2)"}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"解决方法",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#解决方法",children:"#"}),"解决方法"]}),"\n",(0,s.jsxs)(e.h2,{id:"递归",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#递归",children:"#"}),"递归"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",meta:"",children:"function fib(n) {\n  if (n < 2) return n;\n  return fib(n - 1) + fib(n - 2);\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"但这样的方式会导致当求解数量过大的时候，递归层数很深，运行时间长。"}),"\n",(0,s.jsxs)(e.p,{children:["所以可以在递归里面加个",(0,s.jsx)(e.code,{children:"map"})," 来缓存已经计算过的数据"]}),"\n",(0,s.jsxs)(e.h3,{id:"优化",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#优化",children:"#"}),"优化"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",meta:"",children:"const map = new Map();\n\nfunction fib(n) {\n  if (n < 2) return n;\n  if (map.has(n)) return map.get(n);\n  const res = fib(n - 1) + fib(n - 2);\n  map.set(n, res);\n  return res;\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["这份代码如果放在单一解决某个问题的文件运行是没问题的，但如果作为一个",(0,s.jsx)(e.code,{children:"hook"})," 来使用的话，因为",(0,s.jsx)(e.code,{children:"map"})," 的定义在外部作用域，会对外层作用域变量造成污染，所以将",(0,s.jsx)(e.code,{children:"map"})," 的声明改成函数内部。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",meta:"",children:"function fib(n, map = new Map()) {\n  if (n < 2) return n;\n  if (map.has(n)) return map.get(n);\n  const res = fib(n - 1, map) + fib(n - 2, map);\n  map.set(n, res);\n  return res;\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"看似没啥问题了，重新写一个函数，返回一整个斐波那契数列"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",meta:"",children:"function fibs(n) {\n  const res = [];\n  for (let i = 0; i <= n; i++) {\n    res.push(fib(i));\n  }\n  return res;\n}\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"函数导出",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#函数导出",children:"#"}),"函数导出"]}),"\n",(0,s.jsxs)(e.p,{children:["由于现在有两个函数了，但是对于",(0,s.jsx)(e.code,{children:"fibs"})," 函数里面的循环中，每次调用",(0,s.jsx)(e.code,{children:"fib"})," 函数都会实例化一个",(0,s.jsx)(e.code,{children:"map"}),"，但这是放在在外层的，在",(0,s.jsx)(e.code,{children:"fib"})," 函数引用了外部的",(0,s.jsx)(e.code,{children:"map"})," 变量（闭包）。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",meta:"",children:"function createFibFunction() {\n  const mp = new Map();\n\n  function fib(n) {\n    if (n < 2) return n;\n    if (!mp.has(n)) {\n      const res = fib(n - 1) + fib(n - 2);\n      mp.set(n, res);\n    }\n    return mp.get(n);\n  }\n\n  function fibs(n) {\n    const res = [];\n    for (let i = 0; i <= n; i++) {\n      res.push(fib(i));\n    }\n    return res;\n  }\n\n  return { fib, fibs };\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"最后，将两个方法进行导出就能提供给外部使用了"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",meta:"",children:"const { fib, fibs } = createFibFunction();\nexport { fib, fibs };\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"reduce",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#reduce",children:"#"}),"reduce"]}),"\n",(0,s.jsxs)(e.p,{children:["在reduce中，有点像",(0,s.jsx)(e.code,{children:"for"}),"循环遍历叠加，参数中有四个参数："]}),"\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{children:"参数"}),(0,s.jsx)(e.th,{children:"说明"}),(0,s.jsx)(e.th,{children:"是否必选"})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"total"}),(0,s.jsx)(e.td,{children:"初始值，每次迭代后返回的结果"}),(0,s.jsx)(e.td,{children:"✔️"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"currentVal"}),(0,s.jsx)(e.td,{children:"当前遍历到的元素"}),(0,s.jsx)(e.td,{children:"✔️"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"currentIndex"}),(0,s.jsx)(e.td,{children:"当前遍历到的元素下标"}),(0,s.jsx)(e.td,{children:"❌"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"arr"}),(0,s.jsx)(e.td,{children:"当前元素所属的数组对象"}),(0,s.jsx)(e.td,{children:"❌"})]})]})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",meta:"",children:"function fibs(n) {\n  return Array.from({ length: n }).reduce((res, _, index) => {\n    if (index < 2) {\n      res.push(1);\n    } else {\n      res.push(res[index - 1] + res[index - 2]);\n    }\n    return res;\n  }, []);\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"Array.from({ length: n })"})," 是为了构造一个长度为n的数组。"]}),"\n",(0,s.jsxs)(e.p,{children:["还可以通过增加一个函数来给数组里面每个值赋值：",(0,s.jsx)(e.code,{children:"Array.from({length:9},(_, index)=> index)"})]}),"\n",(0,s.jsxs)(e.h2,{id:"生成器",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#生成器",children:"#"}),"生成器"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"迭代器的作用就是可以是数据结构可以通过循环遍历，比如Array、Object、Map和Set。"}),"\n",(0,s.jsxs)(e.p,{children:["他们都可以通过调用",(0,s.jsx)(e.code,{children:"next()"}),"方法进行迭代"]}),"\n"]}),"\n",(0,s.jsxs)(e.h3,{id:"自定义迭代器",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#自定义迭代器",children:"#"}),"自定义迭代器"]}),"\n",(0,s.jsxs)(e.p,{children:["在Object中可以自定义实现一个",(0,s.jsx)(e.code,{children:"Symbol.iterator"})," 来自定义迭代器方法，在",(0,s.jsx)(e.code,{children:"next()"}),"方法中通过返回",(0,s.jsx)(e.code,{children:"{done: 是否终止, value: 返回值}"}),"来判断关闭（没法继续遍历）。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",meta:"",children:"const obj = {\n  arr: [1, 2, 3, 4, 5],\n  [Symbol.iterator]() {\n    let index = 0;\n    return {\n      arr: this.arr,\n      next() {\n        if (index < 5) {\n          return {\n            value: this.arr[index++],\n            done: false,\n          };\n        }\n        return {\n          value: undefined,\n          done: true,\n        };\n      },\n    };\n  },\n};\nfor (let i of obj) {\n  console.log(i);\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["而生成器就是在",(0,s.jsx)(e.code,{children:"ES6"}),"新增的一个结构，拥有在一个函数块内暂停和恢复代码执行的能力。"]}),"\n",(0,s.jsxs)(e.p,{children:["在声明生成器只需要在",(0,s.jsx)(e.code,{children:"function"}),"前面加一个",(0,s.jsx)(e.code,{children:"星号(*)"}),"，通过",(0,s.jsx)(e.code,{children:"yield"})," 关键字进行暂停，通过调用该生成器返回实例的",(0,s.jsx)(e.code,{children:"next()"})," 方法恢复执行。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",meta:"",children:"function* fibIterator(n) {\n  let now = 1,\n    next = 1,\n    count = 0;\n  while (true) {\n    yield now;\n    [now, next] = [next, now + next];\n    count++;\n    if (count >= n) {\n      return;\n    }\n  }\n}\n\nfunction fibs(n) {\n  const iterator = fibIterator(n);\n  const res = [];\n  for (let i of iterator) {\n    res.push(i);\n  }\n  return res;\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["另外一种解法，利用",(0,s.jsx)(e.code,{children:"take(n)"}),"会给定",(0,s.jsx)(e.code,{children:"n"}),"个迭代次数的迭代器。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",meta:"",children:"function* fibIterator(i = 1, j = 1) {\n  while (!(yield i)) [i, j] = [j, i + j];\n}\n\nconsole.log([...fibIterator().take(10)]);\n"})}),"\n",(0,s.jsxs)(e.h2,{id:"完整code",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#完整code",children:"#"}),"完整code"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",meta:"",children:"// getFib.js\nfunction createFibFunction() {\n  const mp = new Map();\n\n  function fib(n) {\n    if (n < 2) return n;\n    if (!mp.has(n)) {\n      const res = fib(n - 1) + fib(n - 2);\n      mp.set(n, res);\n    }\n    return mp.get(n);\n  }\n\n  function fibs(n) {\n    const res = [];\n    for (let i = 0; i <= n; i++) {\n      res.push(fib(i));\n    }\n    return res;\n  }\n\n  return { fib, fibs };\n}\n\nconst { fib, fibs } = createFibFunction();\nexport { fib, fibs };\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",meta:"",children:'\x3c!-- test.html --\x3e\n<!doctype html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Document</title>\n  </head>\n\n  <body>\n    <script type="module">\n      import { fib, fibs } from \'./getFibFunction.js\';\n      console.log(fib(10), fibs(10)); // 55 [0,1,1,2,3,5,8,13,21,34,55]\n    <\/script>\n  </body>\n</html>\n'})}),"\n",(0,s.jsxs)(e.h2,{id:"知识点",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#知识点",children:"#"}),"知识点"]}),"\n",(0,s.jsxs)(e.h3,{id:"闭包",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#闭包",children:"#"}),"闭包"]}),"\n",(0,s.jsx)(e.p,{children:"如果一个函数需要用到外部的变量或者两个函数需要借助一个变量来传递就可以用闭包。"}),"\n",(0,s.jsxs)(e.h3,{id:"模块导出",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#模块导出",children:"#"}),"模块导出"]}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"模块导出的作用就是为了能让外部文件访问到该文件里面的变量、方法和类"}),"\n"]}),"\n",(0,s.jsxs)(e.h4,{id:"分类",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#分类",children:"#"}),"分类"]}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"分别导出"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",meta:"",children:"export const a = 1;\nexport function test() {\n  console.log('test');\n}\n\n// 引入\nimport { a, test } from './test.js';\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"统一导出"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",meta:"",children:"const a = 1;\nfunction test() {\n  console.log('test');\n}\nexport { a, test };\n\n// 引入\nimport * as myFunc from './test.js';\nconsole.log(myFunc.a); // 1\nconsole.log(myFunc.test()); // test\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"默认导出"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",meta:"",children:"function test() {\n  console.log('test');\n}\nexport default test;\n\n// 引入\nimport myFunc from './test.js';\nconsole.log(myFunc.test()); // test\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"总结",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"}),"总结"]}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"找到一个问题的解决方式之后可以思考有没有优化的地方（时间、空间、代码可读性、接口使用方便性）。"}),"\n",(0,s.jsxs)(e.li,{children:["写一个模块的时候要在外面调用更加方便，比如我这里一开始如果是导出",(0,s.jsx)(e.code,{children:"export createFibFunction"}),"，在调用模块的时候就还需要去实例化，但换成最终那样子的话就可以直接调用",(0,s.jsx)(e.code,{children:"fib"})," 和 ",(0,s.jsx)(e.code,{children:"fibs"})," 方法了。"]}),"\n"]})]})}function d(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,s.jsx)(e,Object.assign({},n,{children:(0,s.jsx)(c,n)})):c(n)}let a=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["daily%2Ffib.md"]={toc:[{id:"解决方法",text:"解决方法",depth:2},{id:"递归",text:"递归",depth:2},{id:"优化",text:"优化",depth:3},{id:"函数导出",text:"函数导出",depth:3},{id:"reduce",text:"reduce",depth:2},{id:"生成器",text:"生成器",depth:2},{id:"自定义迭代器",text:"自定义迭代器",depth:3},{id:"完整code",text:"完整code",depth:2},{id:"知识点",text:"知识点",depth:2},{id:"闭包",text:"闭包",depth:3},{id:"模块导出",text:"模块导出",depth:3},{id:"分类",text:"分类",depth:4},{id:"总结",text:"总结",depth:2}],title:"斐波那契数列",frontmatter:{}}},2287:function(n,e,r){r.d(e,{Z:function(){return a}});var s=r(2676),i=r(5271),t=r(2117);r(4986);let c={"zh-CN":n=>`预计阅读时间: ${n.minutes>=1?`${Math.ceil(n.minutes)} 分钟`:"小于 1 分钟"}`,"en-US":n=>`Estimated reading time: ${n.minutes>=1?`${Math.ceil(n.minutes)} minutes`:"less than 1 minute"}`};function d(n,e,r){let s=Object.keys(c).includes(e)?e:r;return c[s](n)}let a=n=>{let{defaultLocale:e="en-US"}=n,r=(0,t.Vi)().page.readingTimeData,c=(0,t.Jr)(),a=(0,t.e7)(),[l,h]=(0,i.useState)(d(r,c,e));return(0,i.useEffect)(()=>{h(d(r,c,e))},[c,r]),(0,s.jsx)("span",{"data-dark":String(a),className:"rp-reading-time",children:l})}}}]);
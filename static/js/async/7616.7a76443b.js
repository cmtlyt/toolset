"use strict";(self.webpackChunk_cmtlyt_toolset=self.webpackChunk_cmtlyt_toolset||[]).push([["7616"],{5781:function(n,e,s){s.r(e),s.d(e,{default:function(){return o}});var r=s(2676),t=s(453),c=s(2287);function l(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",pre:"pre",code:"code",ul:"ul",li:"li",strong:"strong"},(0,t.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"构造方法",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#构造方法",children:"#"}),"构造方法"]}),"\n",(0,r.jsx)(c.Z,{defaultLocale:"zh-CN"}),"\n",(0,r.jsxs)(e.h2,{id:"简介",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#简介",children:"#"}),"简介"]}),"\n",(0,r.jsx)(e.p,{children:"在 JavaScript 中, class 是一种更简洁的、更面向对象的语法来创建对象和处理继承的方式. constructor 是类的一个特殊方法, 用于初始化创建类的实例. 当使用 new 关键字创建类的实例时, constructor 方法会自动被调用进行实例的初始化."}),"\n",(0,r.jsxs)(e.h3,{id:"示例",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#示例",children:"#"}),"示例"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",meta:"",children:"class Person {\n  constructor(name) {\n    this.name = name\n  }\n}\n\nconst person = new Person('John')\n\nconsole.log(person.name) // John\n"})}),"\n",(0,r.jsx)(e.p,{children:"在这个示例中, 我们定义了一个 Person 类, 并在其 constructor 方法中初始化了 name 属性. 然后我们使用 new 关键字创建了一个 Person 类的实例, 并将其赋值给 person. 最后, 我们使用 person.name 来访问 name 属性的值."}),"\n",(0,r.jsx)(e.p,{children:"在这其中我们没有手动的调用 constructor 方法, 但他却自动调用了, 这就是因为我们使用了 new 关键字, 所以自动调用了 constructor 方法."}),"\n",(0,r.jsxs)(e.h2,{id:"那些你可能不知道的事",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#那些你可能不知道的事",children:"#"}),"那些你可能不知道的事"]}),"\n",(0,r.jsx)(e.p,{children:"根据 TC39 的描述, constructor 方法其实可以返回 3 种结果"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"EMPTY"}),"\n",(0,r.jsx)(e.li,{children:"ClassElement"}),"\n",(0,r.jsx)(e.li,{children:"ClassElementList"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"EMPTY"})}),"\n",(0,r.jsxs)(e.p,{children:["EMPTY 就是什么都不返回, 在这种情况下会自动返回当前 class 的实例, 例如",(0,r.jsx)(e.a,{href:"#%E7%A4%BA%E4%BE%8B",children:"示例"}),"中的 Person 类一样, 他就是直接返回了 Person 类本身的实例"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"ClassElement"})}),"\n",(0,r.jsx)(e.p,{children:"ClassElement 从字面上理解就是一个 class 元素, 如果返回 class 元素的话, 那这个 constructor 不会直接返回这个新的 class 元素, 而不是 new 的那个类的实例"}),"\n",(0,r.jsxs)(e.p,{children:["从字面上来看的话他应该需要一个 class 元素, 但是实际上, 只要不是",(0,r.jsx)(e.a,{href:"/toolset/wiki/dataType#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B",children:"基本数据类型"}),", 都可以替换类本身的实例"]}),"\n",(0,r.jsx)(e.p,{children:"如果返回的是一个基本数据类型的话那么和返回 EMPTY 是没有本质区别的"}),"\n",(0,r.jsx)(e.p,{children:"示例"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",meta:"",children:"const ageObj = { age: 20 }\n\nclass Person {\n  constructor(name) {\n    this.name = name\n    return ageObj\n  }\n}\n\nconst person = new Person('John')\nconsole.log(person.name) // undefined\nconsole.log(person.age) // 20\nconsole.log(person) // { age: 20 }\nconsole.log(person instanceof Person) // false\nconsole.log(person === ageObj) // true\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"ClassElementList"})}),"\n",(0,r.jsx)(e.p,{children:"ClassElementList 就是一个 class 元素列表, 如果返回 class 元素列表的话, 那么这个 constructor 就会返回一个新的 class 元素列表, 而不是 new 的那个类的实例"}),"\n",(0,r.jsxs)(e.p,{children:["同样, 从字面上来看的话他是一个 class 元素列表, 但是实际上, 他可以返回任何类型的数组, 包括 ",(0,r.jsx)(e.code,{children:"[1]"}),", ",(0,r.jsx)(e.code,{children:"['']"}),", ",(0,r.jsx)(e.code,{children:"[true]"})," 等, 他并不会深度判断数组中元素的实际类型"]}),"\n",(0,r.jsx)(e.p,{children:"ClassElement 的返回值为一个数组那就是 ClassElementList 了, 只是底层会被识别为 ClassElementList 罢了"}),"\n",(0,r.jsx)(e.p,{children:"对于我们使用者来说的话, ClassElementList 和 ClassElement 没啥区别"}),"\n",(0,r.jsxs)(e.h2,{id:"补充",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#补充",children:"#"}),"补充"]}),"\n",(0,r.jsx)(e.p,{children:"当然不仅是 class 的 constructor 满足这个返回规则, function 类也满足这个返回值的规则"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",meta:"",children:"const obj = {}\n\nclass A {\n  constructor() {\n    this.value = 'test-A'\n    return obj\n  }\n}\n\nfunction B() {\n  this.value = 'test-B'\n  return obj\n}\n\nconst a = new A()\nconst b = new B()\n\nconsole.log(a.value) // undefined\nconsole.log(b.value) // undefined\n\nconsole.log(a === b) // true\n"})})]})}function a(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,t.ah)(),n.components);return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(l,n)})):l(n)}let o=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["wiki%2FConstructorMethod.md"]={toc:[{id:"简介",text:"简介",depth:2},{id:"示例",text:"示例",depth:3},{id:"那些你可能不知道的事",text:"那些你可能不知道的事",depth:2},{id:"补充",text:"补充",depth:2}],title:"构造方法",frontmatter:{}}},2287:function(n,e,s){s.d(e,{Z:function(){return o}});var r=s(2676),t=s(5271),c=s(2117);s(4986);let l={"zh-CN":n=>`预计阅读时间: ${n.minutes>=1?`${Math.ceil(n.minutes)} 分钟`:"小于 1 分钟"}`,"en-US":n=>`Estimated reading time: ${n.minutes>=1?`${Math.ceil(n.minutes)} minutes`:"less than 1 minute"}`};function a(n,e,s){let r=Object.keys(l).includes(e)?e:s;return l[r](n)}let o=n=>{let{defaultLocale:e="en-US"}=n,s=(0,c.Vi)().page.readingTimeData,l=(0,c.Jr)(),o=(0,c.e7)(),[i,d]=(0,t.useState)(a(s,l,e));return(0,t.useEffect)(()=>{d(a(s,l,e))},[l,s]),(0,r.jsx)("span",{"data-dark":String(o),className:"rp-reading-time",children:i})}}}]);
"use strict";(self.webpackChunk_cmtlyt_toolset=self.webpackChunk_cmtlyt_toolset||[]).push([["9943"],{4808:function(e,n,i){i.r(n),i.d(n,{default:function(){return a}});var t=i(2676),s=i(453),r=i(2287);function c(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",ul:"ul",li:"li"},(0,s.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"cicd",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cicd",children:"#"}),"CI/CD"]}),"\n",(0,t.jsx)(r.Z,{defaultLocale:"zh-CN"}),"\n",(0,t.jsxs)(n.h2,{id:"简介",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#简介",children:"#"}),"简介"]}),"\n",(0,t.jsx)(n.p,{children:"CI/CD 代表持续集成 (Continuous Integration, CI)、持续交付 (Continuous Delivery, CD) 和持续部署 (Continuous Deployment, CD), 是现代软件开发中采用的一套实践和原则, 旨在频繁、快速且可靠的交付软件变更."}),"\n",(0,t.jsxs)(n.h2,{id:"持续集成-continuous-integration-ci",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#持续集成-continuous-integration-ci",children:"#"}),"持续集成 (Continuous Integration, CI)"]}),"\n",(0,t.jsx)(n.p,{children:"持续集成强调开发人员经常性地 (通常是每天多次) 将代码变更合并到共享的主线 (如 master 或 main 分支) 上. 每次代码合并后, 自动化的构建和测试流程都会被触发, 以验证新代码是否能成功构建并且不破坏现有功能. 这包括单元测试、集成测试等, 确保代码质量并及时发现和修复问题."}),"\n",(0,t.jsxs)(n.h2,{id:"持续交付-continuous-delivery-cd",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#持续交付-continuous-delivery-cd",children:"#"}),"持续交付 (Continuous Delivery, CD)"]}),"\n",(0,t.jsx)(n.p,{children:"持续交付建立在持续集成的基础上, 目标是使软件始终处于可随时部署到生产环境的状态. 这意味着一旦代码通过所有阶段的自动化测试, 就可以立即发不到生产环境, 但是否实际部署通常是一个手动触发的决策. 持续交付强调的是快速、高质量的软件准备过程, 以便业务决定最佳的发布时间."}),"\n",(0,t.jsxs)(n.h2,{id:"持续部署-continuous-deployment-cd",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#持续部署-continuous-deployment-cd",children:"#"}),"持续部署 (Continuous Deployment, CD)"]}),"\n",(0,t.jsx)(n.p,{children:"持续部署则更新一步, 他自动将所有通过测试的代码变更部署到生产环境中, 无需人工干预. 这就意味着每次代码推动, 只要通过了自动化测试套件, 就会自动部署到用户手中. 这种做法要求有高度成熟的自动化测试和即时回滚机制, 以确保即使有错误发生也能迅速恢复."}),"\n",(0,t.jsxs)(n.h2,{id:"cicd-的核心价值",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cicd-的核心价值",children:"#"}),"CI/CD 的核心价值"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"加速反馈循环: 快速发现和修复问题, 减少软件发布周期"}),"\n",(0,t.jsx)(n.li,{children:"提高软件质量: 自动化测试确保了代码变更的可靠性"}),"\n",(0,t.jsx)(n.li,{children:"减少人为错误: 自动化流程降低了手动操作出错的可能性"}),"\n",(0,t.jsx)(n.li,{children:"提升团队协作: 促进开发、测试和运维之间的紧密合作"}),"\n",(0,t.jsx)(n.li,{children:"增强发布信心: 确保软件随时可以安全、稳定地部署"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"CI/CD 流程通常依赖于一套工具链, 如 Jenkins、GitLab CI/CD、Travis CI、CircelCI、Github Actions 等, 来自动化构建、测试和部署任务."})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(c,e)})):c(e)}let a=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["wiki%2FCI_CD.md"]={toc:[{id:"简介",text:"简介",depth:2},{id:"持续集成-continuous-integration-ci",text:"持续集成 (Continuous Integration, CI)",depth:2},{id:"持续交付-continuous-delivery-cd",text:"持续交付 (Continuous Delivery, CD)",depth:2},{id:"持续部署-continuous-deployment-cd",text:"持续部署 (Continuous Deployment, CD)",depth:2},{id:"cicd-的核心价值",text:"CI/CD 的核心价值",depth:2}],title:"CI/CD",frontmatter:{}}},2287:function(e,n,i){i.d(n,{Z:function(){return a}});var t=i(2676),s=i(5271),r=i(2117);i(4986);let c={"zh-CN":e=>`预计阅读时间: ${e.minutes>=1?`${Math.ceil(e.minutes)} 分钟`:"小于 1 分钟"}`,"en-US":e=>`Estimated reading time: ${e.minutes>=1?`${Math.ceil(e.minutes)} minutes`:"less than 1 minute"}`};function d(e,n,i){let t=Object.keys(c).includes(n)?n:i;return c[t](e)}let a=e=>{let{defaultLocale:n="en-US"}=e,i=(0,r.Vi)().page.readingTimeData,c=(0,r.Jr)(),a=(0,r.e7)(),[l,h]=(0,s.useState)(d(i,c,n));return(0,s.useEffect)(()=>{h(d(i,c,n))},[c,i]),(0,t.jsx)("span",{"data-dark":String(a),className:"rp-reading-time",children:l})}}}]);
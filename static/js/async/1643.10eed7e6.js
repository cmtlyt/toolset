"use strict";(self.webpackChunk_cmtlyt_toolset=self.webpackChunk_cmtlyt_toolset||[]).push([["1643"],{3910:function(e,n,r){r.r(n),r.d(n,{default:function(){return i}});var s=r(2676),t=r(453),c=r(2287);function l(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",strong:"strong",pre:"pre",code:"code",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"数据处理相关方法",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据处理相关方法",children:"#"}),"数据处理相关方法"]}),"\n",(0,s.jsx)(c.Z,{defaultLocale:"zh-CN"}),"\n",(0,s.jsxs)(n.h2,{id:"getarray",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#getarray",children:"#"}),"getArray"]}),"\n",(0,s.jsx)(n.p,{children:"参数归一化为数组"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"类型声明"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"function getArray<T>(value: T): T extends any[] ? T : T[];\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"参数"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{align:"center",children:"必填"}),(0,s.jsx)(n.th,{children:"参数"}),(0,s.jsx)(n.th,{children:"说明"}),(0,s.jsx)(n.th,{children:"类型"}),(0,s.jsx)(n.th,{children:"默认值"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center"}),(0,s.jsx)(n.td,{children:"value"}),(0,s.jsx)(n.td,{children:"数组"}),(0,s.jsx)(n.td,{children:"any"}),(0,s.jsx)(n.td,{})]})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"返回值"}),": ",(0,s.jsx)(n.code,{children:"array"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"示例"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"import { getArray } from '@cmtlyt/base';\n// import { getArray } from '@cmtlyt/base/utils/dataHandler';\n\nconst arr = getArray(1);\nconsole.log(arr); // [1]\nconsole.log(getArray([2])); // [2]\nconsole.log(getArray()); // []\nconsole.log(getArray({ a: 1 })); // [{ a: 1 }]\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"getarrayslice",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#getarrayslice",children:"#"}),"getArraySlice"]}),"\n",(0,s.jsx)(n.p,{children:"获取数组切片"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"类型声明"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"function getArraySlice<T extends any[]>(array: T, size: number): T[];\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"参数"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{align:"center",children:"必填"}),(0,s.jsx)(n.th,{children:"参数"}),(0,s.jsx)(n.th,{children:"说明"}),(0,s.jsx)(n.th,{children:"类型"}),(0,s.jsx)(n.th,{children:"默认值"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center",children:"*"}),(0,s.jsx)(n.td,{children:"array"}),(0,s.jsx)(n.td,{children:"数组"}),(0,s.jsx)(n.td,{children:"any[]"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center"}),(0,s.jsx)(n.td,{children:"size"}),(0,s.jsx)(n.td,{children:"切片大小"}),(0,s.jsx)(n.td,{children:"number"}),(0,s.jsx)(n.td,{})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"返回值"}),": ",(0,s.jsx)(n.code,{children:"array"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"示例"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"import { getArraySlice } from '@cmtlyt/base';\n// import { getArraySlice } from '@cmtlyt/base/utils/dataHandler';\n\nconst arr = getArraySlice([1, 2, 3, 4, 5], 2);\nconsole.log(arr); // [[1, 2], [3, 4], [5]]\nconsole.log(getArraySlice([1, 2, 3, 4, 5], 3)); // [[1, 2, 3], [4, 5]]\nconsole.log(getArraySlice([1, 2, 3, 4, 5], 6)); // [[1, 2, 3, 4, 5]]\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"deepclone",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#deepclone",children:"#"}),"deepClone"]}),"\n",(0,s.jsx)(n.p,{children:"深拷贝"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"类型声明"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"function deepClone<T>(obj: T): T;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"参数"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{align:"center",children:"必填"}),(0,s.jsx)(n.th,{children:"参数"}),(0,s.jsx)(n.th,{children:"说明"}),(0,s.jsx)(n.th,{children:"类型"}),(0,s.jsx)(n.th,{children:"默认值"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center"}),(0,s.jsx)(n.td,{children:"obj"}),(0,s.jsx)(n.td,{children:"任意值"}),(0,s.jsx)(n.td,{children:"T"}),(0,s.jsx)(n.td,{})]})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"返回值"}),": ",(0,s.jsx)(n.code,{children:"T"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"示例"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"import { deepClone } from '@cmtlyt/base';\n// import { deepClone } from '@cmtlyt/base/utils/dataHandler';\n\nconst obj = {\n  a: 1,\n  b: {\n    c: 2,\n  },\n};\nconst obj2 = deepClone(obj);\nobj2.a = 2;\nobj2.b.c = 3;\nconsole.log(obj.a); // 1\nconsole.log(obj.b.c); // 2\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"merge",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#merge",children:"#"}),"merge"]}),"\n",(0,s.jsx)(n.p,{children:"合并对象"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"类型声明"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"export declare function merge<T>(target: T, ...source: any[]): T;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"参数"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{align:"center",children:"必填"}),(0,s.jsx)(n.th,{children:"参数"}),(0,s.jsx)(n.th,{children:"说明"}),(0,s.jsx)(n.th,{children:"类型"}),(0,s.jsx)(n.th,{children:"默认值"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center",children:"*"}),(0,s.jsx)(n.td,{children:"target"}),(0,s.jsx)(n.td,{children:"合并的目标"}),(0,s.jsx)(n.td,{children:"T"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center"}),(0,s.jsx)(n.td,{children:"...source"}),(0,s.jsx)(n.td,{children:"合并数据来源"}),(0,s.jsx)(n.td,{children:"any[]"}),(0,s.jsx)(n.td,{})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"返回值"}),": ",(0,s.jsx)(n.code,{children:"T"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"示例"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"import { merge } from '@cmtlyt/base';\n// import { merge } from '@cmtlyt/base/utils/dataHandler';\n\nconst obj = {\n  a: 1,\n  b: {\n    c: 2,\n  },\n};\nconst obj2 = merge(obj, {\n  a: 2,\n  b: {\n    c: 3,\n  },\n});\nconsole.log(obj2.a); // 2\nconsole.log(obj2.b.c); // 3\nconsole.log(obj === obj2); // true\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"clonemerge",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#clonemerge",children:"#"}),"cloneMerge"]}),"\n",(0,s.jsx)(n.p,{children:"深拷贝合并对象"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"类型声明"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"export declare function cloneMerge<T>(target: T, ...source: any[]): T;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"参数"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{align:"center",children:"必填"}),(0,s.jsx)(n.th,{children:"参数"}),(0,s.jsx)(n.th,{children:"说明"}),(0,s.jsx)(n.th,{children:"类型"}),(0,s.jsx)(n.th,{children:"默认值"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center",children:"*"}),(0,s.jsx)(n.td,{children:"target"}),(0,s.jsx)(n.td,{children:"合并的目标"}),(0,s.jsx)(n.td,{children:"T"}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center"}),(0,s.jsx)(n.td,{children:"...source"}),(0,s.jsx)(n.td,{children:"合并数据来源"}),(0,s.jsx)(n.td,{children:"any[]"}),(0,s.jsx)(n.td,{})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"返回值"}),": ",(0,s.jsx)(n.code,{children:"T"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"示例"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"import { cloneMerge } from '@cmtlyt/base';\n// import { cloneMerge } from '@cmtlyt/base/utils/dataHandler';\n\nconst obj = {\n  a: 1,\n  b: {\n    c: 2,\n  },\n};\nconst obj2 = cloneMerge(obj, {\n  a: 2,\n  b: {\n    c: 3,\n  },\n});\nconsole.log(obj2.a); // 2\nconsole.log(obj2.b.c); // 3\nconsole.log(obj === obj2); // false\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"asyncreplace",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#asyncreplace",children:"#"}),"asyncReplace"]}),"\n",(0,s.jsx)(n.p,{children:"异步替换"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"类型声明"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"function asyncReplace(\n  str: string,\n  pattern: string | RegExp,\n  replacer: ((match: string, ...args: any[]) => Promise<string> | string) | string,\n): Promise<string>;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"参数"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{align:"center",children:"必填"}),(0,s.jsx)(n.th,{children:"参数"}),(0,s.jsx)(n.th,{children:"说明"}),(0,s.jsx)(n.th,{children:"类型"}),(0,s.jsx)(n.th,{children:"默认值"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center",children:"*"}),(0,s.jsx)(n.td,{children:"str"}),(0,s.jsx)(n.td,{children:"字符串"}),(0,s.jsx)(n.td,{children:"string"}),(0,s.jsx)(n.td,{children:"-"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center",children:"*"}),(0,s.jsx)(n.td,{children:"pattern"}),(0,s.jsx)(n.td,{children:"正则"}),(0,s.jsx)(n.td,{children:"string|RegExp"}),(0,s.jsx)(n.td,{children:"-"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center",children:"*"}),(0,s.jsx)(n.td,{children:"replacer"}),(0,s.jsx)(n.td,{children:"替换函数"}),(0,s.jsxs)(n.td,{children:["(match: string, ...args: any[]) => Promise"," | string"]}),(0,s.jsx)(n.td,{children:"-"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"返回值"}),": ",(0,s.jsx)(n.code,{children:"Promise<string>"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"示例"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",meta:"",children:"import { asyncReplace } from '@cmtlyt/base';\n// import { asyncReplace } from '@cmtlyt/base/utils/dataHandler'\n\nasyncReplace('hello world', 'world', async (match) => {\n  return '@cmtlyt/base';\n}); // hello @cmtlyt/base\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"asyncfilter",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#asyncfilter",children:"#"}),"asyncFilter"]}),"\n",(0,s.jsx)(n.p,{children:"异步过滤"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"类型声明"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",meta:"",children:"function asyncFilter<T>(arr: T[], predicate: (item: T, index: number) => Promise<boolean> | boolean): Promise<T[]>;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"参数"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{align:"center",children:"必填"}),(0,s.jsx)(n.th,{children:"参数"}),(0,s.jsx)(n.th,{children:"说明"}),(0,s.jsx)(n.th,{children:"类型"}),(0,s.jsx)(n.th,{children:"默认值"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center",children:"*"}),(0,s.jsx)(n.td,{children:"arr"}),(0,s.jsx)(n.td,{children:"数组"}),(0,s.jsx)(n.td,{children:"T[]"}),(0,s.jsx)(n.td,{children:"-"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{align:"center",children:"*"}),(0,s.jsx)(n.td,{children:"predicate"}),(0,s.jsx)(n.td,{children:"过滤函数"}),(0,s.jsxs)(n.td,{children:["(item: T, index: number) => Promise"," | boolean"]}),(0,s.jsx)(n.td,{children:"-"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"返回值"}),": ",(0,s.jsx)(n.code,{children:"Promise<T[]>"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"示例"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",meta:"",children:"import { asyncFilter } from '@cmtlyt/base';\n// import { asyncFilter } from '@cmtlyt/base/utils/dataHandler'\n\nasyncFilter([1, 2, 3, 4, 5], async (item) => {\n  return item > 2;\n}); // Promise<[3, 4, 5]>\n"})})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(l,e)})):l(e)}let i=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["packages%2Fbase%2Futils%2FdataHandler.md"]={toc:[{id:"getarray",text:"getArray",depth:2},{id:"getarrayslice",text:"getArraySlice",depth:2},{id:"deepclone",text:"deepClone",depth:2},{id:"merge",text:"merge",depth:2},{id:"clonemerge",text:"cloneMerge",depth:2},{id:"asyncreplace",text:"asyncReplace",depth:2},{id:"asyncfilter",text:"asyncFilter",depth:2}],title:"数据处理相关方法",frontmatter:{}}},2287:function(e,n,r){r.d(n,{Z:function(){return i}});var s=r(2676),t=r(5271),c=r(2117);r(4986);let l={"zh-CN":e=>`预计阅读时间: ${e.minutes>=1?`${Math.ceil(e.minutes)} 分钟`:"小于 1 分钟"}`,"en-US":e=>`Estimated reading time: ${e.minutes>=1?`${Math.ceil(e.minutes)} minutes`:"less than 1 minute"}`};function d(e,n,r){let s=Object.keys(l).includes(n)?n:r;return l[s](e)}let i=e=>{let{defaultLocale:n="en-US"}=e,r=(0,c.Vi)().page.readingTimeData,l=(0,c.Jr)(),i=(0,c.e7)(),[h,a]=(0,t.useState)(d(r,l,n));return(0,t.useEffect)(()=>{a(d(r,l,n))},[l,r]),(0,s.jsx)("span",{"data-dark":String(i),className:"rp-reading-time",children:h})}}}]);